---
swagger: "2.0"
info:
  description: "API detailed description "
  version: "1.0.0"
  title: "NodeRest API"
basePath: "/v1"
tags:
- name: "ProductName"
  description: "Product Name."
- name: "LOB"
  description: "Line of business name."
- name: "backendName"
  description: "Backend Service name for internal API only. External "
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /readyStatus:
    get:
      tags:
      - "status"
      summary: "gets the status of the microservice backend systems."
      description: "gets the status of the entire given system, including all downstream\
        \ systems. in this case,it would represent the status of the deposit prospect\
        \ api  microservice as well as the qualifile source system."
      operationId: "readyStatusGET"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            example:
              ready: true
              readyAsOf: "2018-08-07t15:12:22z"
              backends:
              - name: "Phersing"
                status: 200
              - name: "AFS"
                status: 404
            properties: {}
      x-swagger-router-controller: "Status"
  /liveStatus:
    get:
      tags:
      - "status"
      summary: "gets the status of the microservice itself."
      description: "gets the status of the entire given system, including all downstream\
        \ systems. in this case,it would represent the status of the deposit prospect\
        \ api  microservice as well as the qualifile source system."
      operationId: "liveStatusGET"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            example:
              live: true
              liveAsOf: "2018-08-07t15:12:22z"
              buildDate: "2018-01-07t15:12:22z"
              artifactVersion: "snapshot-123456"
            properties: {}
      x-swagger-router-controller: "Status"
  /:
    get:
      description: "get array of person details"
      operationId: "getPersons"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/Persons"
          examples:
            application/json: "[\n{\n  \"id\": 1,\n  \"name\": \"abc\"\n}, {\n  \"\
              id\": 2,\n  \"name\": \"xyz\"\n}\n]"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/JsonError"
          examples:
            application/json: "{\n  \"code\": 400,\n  \"message\": \"some error\"\n\
              }"
      x-swagger-router-controller: "getPersons"
  /{personId}:
    get:
      description: "get person details by id"
      operationId: "getPersonById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "personId"
        in: "path"
        description: "ID of person to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/Person"
          examples:
            application/json: "{\n  \"id\": 1,\n  \"name\": \"abc\"\n}"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/JsonError"
          examples:
            application/json: "{\n  \"code\": 400,\n  \"message\": \"some error\"\n\
              }"
      x-swagger-router-controller: "Person"
definitions:
  Persons:
    type: "array"
    items:
      $ref: "#/definitions/Person"
  Person:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  JsonError:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
        format: "string"
